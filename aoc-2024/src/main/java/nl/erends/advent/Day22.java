package nl.erends.advent;

import nl.erends.advent.util.AbstractProblem;
import nl.erends.advent.util.Util;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <h1>--- Day 22: Monkey Market ---</h1>
 * <p>As you're all teleported deep into the jungle, a monkey steals The
 * Historians' device! The monkey that stole the device seems willing to trade
 * it, but only in exchange for an absurd number of bananas. Your only option is
 * to buy bananas on the Monkey Exchange Market. For each buyer, simulate the
 * creation of 2000 new secret numbers. What is the sum of the 2000th secret
 * number generated by each buyer?</p>
 * <p><a href="https://adventofcode.com/2024/day/22">2024 Day 22</a></p>
 */
public class Day22 extends AbstractProblem<List<Integer>, Long> {

    static void main() {
        new Day22().setAndSolve(Util.readIntegers(2024, 22));
    }

    @Override
    protected Long solve1() {
        long sum = 0;
        for (Integer i : input) {
            long number = i;
            for (int t = 0; t < 2000; t++) {
                number = getNextNumber(number);
            }
            sum += number;
        }
        return sum;
    }

    @Override
    public Long solve2() {
        Map<String, Integer> bananaMap = new HashMap<>();
        for (int seed : input) {
            Monkey monkey = new Monkey(seed);
            monkey.fillYieldMap();
            for (Map.Entry<String, Integer> entry : monkey.yieldMap.entrySet()) {
                bananaMap.compute(entry.getKey(), (_, v) -> v == null ? entry.getValue() : v + entry.getValue());
            }
        }
        return bananaMap.values().stream().mapToLong(i -> i).max().orElseThrow();
    }

    long getNextNumber(long number) {
        number ^= (number * 64);
        number %= 16777216;
        number ^= (number / 32);
        number %= 16777216;
        number ^= (number * 2048);
        number %= 16777216;
        return number;
    }

    class Monkey {

        final Map<String, Integer> yieldMap = new HashMap<>();
        final Deque<Integer> sequence = new ArrayDeque<>();
        long value;

        Monkey(long value) {
            this.value = value;
        }

        void fillYieldMap() {
            for (int t = 0; t < 2000; t++) {
                long newValue = getNextNumber(value);
                int diff = (int) ((newValue % 10) - (value % 10));
                sequence.add(diff);
                if (sequence.size() > 4) {
                    sequence.removeFirst();
                }
                if (sequence.size() == 4) {
                    String seqString = sequence.toString();
                    yieldMap.putIfAbsent(seqString, (int) (newValue % 10));
                }
                value = newValue;
            }
        }
    }
}
